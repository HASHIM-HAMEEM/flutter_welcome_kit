import 'package:flutter/material.dart';
import 'package:flutter_welcome_kit/core/tour_step.dart';

class TooltipCard extends StatefulWidget {
  final TourStep step;
  final Rect targetRect;
  final VoidCallback onNext;
  final VoidCallback onSkip;
  final Color backgroundColor;

  const TooltipCard({
    super.key,
    required this.step,
    required this.targetRect,
    required this.onNext,
    required this.onSkip,
    this.backgroundColor = Colors.white,
  });

  @override
  State<TooltipCard> createState() => _TooltipCardState();
}

class _TooltipCardState extends State<TooltipCard>
    with TickerProviderStateMixin {
  late AnimationController _controller;
  late AnimationController _pulseController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<double> _pulseAnimation;

  @override
  void initState() {
    super.initState();

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 400),
    );
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    );
    _scaleAnimation = Tween<double>(
      begin: 0.9,
      end: 1.0,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.decelerate));

    _pulseController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1000),
    )..repeat(reverse: true);

    _pulseAnimation = Tween<double>(begin: 1.0, end: 1.15).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );

    _controller.forward();

    // Auto advance after duration (if not last step)
    Future.delayed(widget.step.duration, () {
      if (mounted && !widget.step.isLast) {
        widget.onNext();
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    _pulseController.dispose();
    super.dispose();
  }

  Offset _calculatePosition(Size screenSize) {
    const double verticalOffset = 16;
    const double horizontalPadding = 20;
    double dx = horizontalPadding;
    double dy = widget.targetRect.bottom + verticalOffset + 12;

    if (dy + 200 > screenSize.height) {
      dy = widget.targetRect.top - 180;
    }

    if (widget.targetRect.left < screenSize.width / 2) {
      dx = horizontalPadding;
    } else {
      dx = screenSize.width - 320;
    }

    return Offset(
      dx.clamp(0, screenSize.width - 300),
      dy.clamp(0, screenSize.height - 250),
    );
  }

  bool get _isArrowOnTop => widget.step.alignment == TourAlignment.top;

  bool get _isArrowOnBottom => widget.step.alignment == TourAlignment.bottom;

  bool get _isArrowOnLeft => widget.step.alignment == TourAlignment.left;

  bool get _isArrowOnRight => widget.step.alignment == TourAlignment.right;

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;
    final position = _calculatePosition(screenSize);
    final targetCenterX = widget.targetRect.center.dx;
    final buttonLabel =
        widget.step.buttonLabel ?? (widget.step.isLast ? "Close" : "Next");

    final isDark = Theme.of(context).brightness == Brightness.dark;
    final cardColor = widget.step.backgroundColor != Colors.white
        ? widget.step.backgroundColor
        : (isDark ? Colors.grey[850]! : Colors.white);
    final textColor = isDark ? Colors.white : Colors.black87;

    return Stack(
      children: [
        GestureDetector(
          onTap: widget.onSkip,
          behavior: HitTestBehavior.translucent,
          child: Container(
            width: screenSize.width,
            height: screenSize.height,
            color: Colors.transparent,
          ),
        ),
        Positioned(
          top: position.dy,
          left: position.dx,
          child: FadeTransition(
            opacity: _fadeAnimation,
            child: ScaleTransition(
              scale: _scaleAnimation,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (_isArrowOnTop)
                    _buildArrow(
                      targetCenterX - position.dx,
                      AxisDirection.down,
                    ),
                  if (_isArrowOnBottom)
                    _buildArrow(targetCenterX - position.dx, AxisDirection.up),
                  if (_isArrowOnLeft) _buildArrow(16, AxisDirection.right),
                  if (_isArrowOnRight) _buildArrow(260, AxisDirection.left),
                  Material(
                    color: Colors.transparent,
                    child: Container(
                      width: 280,
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: cardColor,
                        borderRadius: BorderRadius.circular(16),
                        boxShadow: const [
                          BoxShadow(
                            color: Colors.black26,
                            blurRadius: 12,
                            offset: Offset(0, 6),
                          ),
                        ],
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: Text(
                                  widget.step.title,
                                  style: Theme.of(context).textTheme.titleMedium
                                      ?.copyWith(color: textColor),
                                ),
                              ),
                              IconButton(
                                onPressed: widget.onSkip,
                                icon: const Icon(Icons.close),
                                splashRadius: 20,
                                tooltip: 'Close',
                                color: textColor,
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          Text(
                            widget.step.description,
                            style: Theme.of(
                              context,
                            ).textTheme.bodyMedium?.copyWith(color: textColor),
                          ),
                          const SizedBox(height: 12),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              ElevatedButton(
                                onPressed: widget.onNext,
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: isDark
                                      ? Colors.white
                                      : Theme.of(context).primaryColor,
                                  foregroundColor: isDark
                                      ? Colors.black
                                      : Colors.white,
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                ),
                                child: Text(buttonLabel),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                  /*if (_isArrowOnTop)
                    _buildArrow(
                      targetCenterX - position.dx,
                      AxisDirection.down,
                    ),
                  if (_isArrowOnBottom)
                    _buildArrow(targetCenterX - position.dx, AxisDirection.up),
                  if (_isArrowOnLeft) _buildArrow(16, AxisDirection.right),
                  if (_isArrowOnRight) _buildArrow(260, AxisDirection.left),*/
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildArrow(double offsetX, AxisDirection direction) {
    return Padding(
      padding: EdgeInsets.only(left: offsetX.clamp(10, 250)),
      child: ScaleTransition(
        scale: _pulseAnimation,
        child: CustomPaint(
          size: const Size(20, 10),
          painter: _ArrowPainter(
            color: widget.step.backgroundColor,
            direction: direction,
          ),
        ),
      ),
    );
  }
}

class _ArrowPainter extends CustomPainter {
  final Color color;
  final AxisDirection direction;
  _ArrowPainter({required this.color, required this.direction});

  @override
  void paint(Canvas canvas, Size size) {
    final path = Path();
    switch (direction) {
      case AxisDirection.up:
        path.moveTo(0, size.height);
        path.lineTo(size.width / 2, 0);
        path.lineTo(size.width, size.height);
        break;
      case AxisDirection.down:
        path.moveTo(0, 0);
        path.lineTo(size.width / 2, size.height);
        path.lineTo(size.width, 0);
        break;
      case AxisDirection.left:
        path.moveTo(size.width, 0);
        path.lineTo(0, size.height / 2);
        path.lineTo(size.width, size.height);
        break;
      case AxisDirection.right:
        path.moveTo(0, 0);
        path.lineTo(size.width, size.height / 2);
        path.lineTo(0, size.height);
        break;
    }
    path.close();
    final paint = Paint()..color = color;
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}
